package fileconverter;

import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.List;

import javax.imageio.ImageIO;

import com.sun.javafx.iio.ImageStorage;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class PDFBox {
    private final static BASE64Decoder decoder = new BASE64Decoder();
    private final static BASE64Encoder encoder = new BASE64Encoder();

    public static void main(String[] args) throws IOException {
        String source = "";
        PDDocument doc = PDDocument.load(new ByteArrayInputStream(decoder.decodeBuffer(source)));
        int pageCount = doc.getNumberOfPages();
        System.out.println(pageCount);
        Date start = new Date();
        try {
            List pages = doc.getDocumentCatalog().getAllPages();
            for (int i = 0; i < pages.size(); i++) {
                PDPage page = (PDPage) pages.get(i);
                BufferedImage image = page.convertToImage(1, 216);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ImageIO.write(image, "JPEG", bos);
                String jpgText = encoder.encode(bos.toByteArray());
                String jpgPath = "D:\\image216" + i + ".jpg";
                PdfTest.generateImage(jpgText, jpgPath);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            doc.close();
        }
        Date end = new Date();
        System.out.println(end.getTime() - start.getTime());
        System.out.println("over");
    }

    public static void streamOperation() {
//        try {
//            FileInputStream fis = new FileInputStream("../input/fxrates.txt");
//            FileOutputStream fos = new FileOutputStream("../output/fxrates.tx");
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        }

        try (FileInputStream fis = new FileInputStream("../input/fxrates.txt");
             FileOutputStream fos = new FileOutputStream("../output/fxrates.tx");) {
            String x = "xabs";
            byte[] bytes = x.getBytes(StandardCharsets.UTF_8);
            fis.read();
        } catch (Exception e) {

        }


    }


}
