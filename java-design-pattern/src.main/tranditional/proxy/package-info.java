package tranditional.proxy;

/**
 * 代理模式的应用场景：

 如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：

 1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。

 2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。

 使用代理模式，可以将功能划分的更加清晰，有助于后期维护！

 ========================================================================================
 其实，说实话，有的时候，很难实现第二种情形，我们修改的业务有的时候总是和原来的函数息息相关，换句话说，由于原先的代码的业务过于复杂或者当初设计不合理，

 导致分层不清晰，导致如今无论是获取参数信息还是什么的，都非常杂乱，这时候使用代理模式可能会比较难。

 **/